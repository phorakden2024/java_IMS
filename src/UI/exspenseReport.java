/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/OkCancelDialog.java to edit this template
 */
package UI;

import ModulComponent.subComponent.Supplier.Sale.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import java.io.File;
import java.io.InputStream;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Month;
import java.time.temporal.TemporalAdjusters;
import java.util.HashMap;
import java.util.Map;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import java.sql.Statement;
import java.sql.ResultSet;

/**
 *
 * @author Da Phadenphorakden
 */
public class exspenseReport extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form DailogInvoiceList
     */
    public exspenseReport(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Close the dialog when Esc is pressed
//        String cancelName = "cancel";
//        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
//        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
//        ActionMap actionMap = getRootPane().getActionMap();
//        actionMap.put(cancelName, new AbstractAction() {
//            public void actionPerformed(ActionEvent e) {
//                doClose(RET_CANCEL);
//            }
//        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnperview = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        cboReportFormat = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        spinnerStartDate = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        spinnerEndDate = new javax.swing.JSpinner();
        CheckBox_DTD = new javax.swing.JCheckBox();
        CheckBox_GR = new javax.swing.JCheckBox();

        setAlwaysOnTop(true);
        setAutoRequestFocus(false);
        setModalExclusionType(null);
        setModalityType(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        btnperview.setText("Preview");
        btnperview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnperviewActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        cboReportFormat.setFont(new java.awt.Font("Geist Mono", 0, 14)); // NOI18N
        cboReportFormat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Daily Report", "Monthly Report", "All Report" }));
        cboReportFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboReportFormatActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Geist Mono", 0, 24)); // NOI18N
        jLabel3.setText("Exspenses Report");

        jLabel2.setFont(new java.awt.Font("Geist Mono", 0, 16)); // NOI18N
        jLabel2.setText("Start Date (YYYY-MM-DD)");

        spinnerStartDate.setFont(new java.awt.Font("Geist Mono", 0, 18)); // NOI18N
        spinnerStartDate.setModel(new javax.swing.SpinnerDateModel());
        spinnerStartDate.setDoubleBuffered(true);
        spinnerStartDate.setEditor(new javax.swing.JSpinner.DateEditor(spinnerStartDate, "yyyy-MM-dd"));

        jLabel1.setFont(new java.awt.Font("Geist Mono", 0, 16)); // NOI18N
        jLabel1.setText("End Date (YYYY-MM-DD)");

        spinnerEndDate.setFont(new java.awt.Font("Geist Mono", 0, 18)); // NOI18N
        spinnerEndDate.setModel(new javax.swing.SpinnerDateModel());
        spinnerEndDate.setDoubleBuffered(true);
        spinnerEndDate.setEditor(new javax.swing.JSpinner.DateEditor(spinnerEndDate, "yyyy-MM-dd"));

        CheckBox_DTD.setText("Fillter Day to Day");
        CheckBox_DTD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_DTDActionPerformed(evt);
            }
        });

        CheckBox_GR.setText("General Report");
        CheckBox_GR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_GRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cboReportFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(spinnerEndDate)
                                        .addComponent(spinnerStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2)))
                                .addGap(0, 2, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnperview, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CheckBox_DTD)
                                    .addComponent(CheckBox_GR))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CheckBox_DTD)
                .addGap(3, 3, 3)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(CheckBox_GR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboReportFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnperview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(btnperview);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnperviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnperviewActionPerformed
        Connection conn = null;
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        String startDate = df.format(this.spinnerStartDate.getValue());
        String endDate = df.format(this.spinnerEndDate.getValue());
        if (this.CheckBox_DTD.getModel().isSelected()) {
            try {
                // 1. Connect to PostgreSQL database
                conn = DriverManager.getConnection(
                        "jdbc:postgresql://localhost:5432/Inventory?user=postgres&password=dan@12345&connectTimeout=30"
                );
                System.out.println("Database connection established.");

                // 2. Load JRXML report file from classpath
                InputStream jrxmlStream = exspenseReport.class.getClassLoader().getResourceAsStream("Reports/exspensesReportStartEnd.jrxml");

                if (jrxmlStream == null) {
                    throw new JRException("exspensesReport.jrxml not found. Ensure it's in src/Reports and properly added to the classpath.");
                }

                // 3. Compile the JRXML to JasperReport
                JasperReport jasperReport = JasperCompileManager.compileReport(jrxmlStream);
                System.out.println("JRXML compiled successfully.");

                // 4. Set report parameters
                Map<String, Object> parameters = new HashMap<>();
                parameters.put("REPORT_TITLE", "Exspenses Report");
                parameters.put("REPORT_START_DATE", java.sql.Date.valueOf(startDate));
                parameters.put("REPORT_END_DATE", java.sql.Date.valueOf(endDate));

                // 5. Fill the report with data from the DB
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, conn);
                System.out.println("Report filled with data.");

                // 6. Show the report in viewer (GUI)
                JasperViewer.viewReport(jasperPrint, false);
                System.out.println("Report displayed successfully.");

            } catch (JRException e) {
                System.err.println("JasperReport Error: " + e.getMessage());
            } catch (SQLException e) {
                System.err.println("Database Error: " + e.getMessage());
            } finally {
                // 7. Always close DB connection
                if (conn != null) {
                    try {
                        conn.close();
                        System.out.println("🔒 Database connection closed.");
                    } catch (SQLException e) {
                        System.err.println("⚠️ Failed to close DB connection: " + e.getMessage());
                    }
                }
            }
        }
        if (this.CheckBox_GR.getModel().isSelected()) {
            try {
                // 1. Connect to PostgreSQL database
                conn = DriverManager.getConnection(
                        "jdbc:postgresql://localhost:5432/Inventory?user=postgres&password=dan@12345&connectTimeout=30"
                );
                System.out.println("Database connection established.");

                switch (this.cboReportFormat.getSelectedIndex()) {
                    case 0 -> {
//                        // 2. Load JRXML report file from classpath
//                        InputStream jrxmlStream = Invoices_list.class.getClassLoader().getResourceAsStream("Reports/newDaily.jrxml");
//
//                        if (jrxmlStream == null) {
//                            throw new JRException("newDaily.jrxml not found. Ensure it's in src/Reports and properly added to the classpath.");
//                        }
//                        // 3. Compile the JRXML to JasperReport
//                        JasperReport jasperReport = JasperCompileManager.compileReport(jrxmlStream);
//                        System.out.println("JRXML compiled successfully.");
//                        // 4. Set report parameters
//                        Map<String, Object> parameters = new HashMap<>();
//                        parameters.put("REPORT_TITLE", "Daily Invoice Report");
//                        LocalDate currentDate = LocalDate.now();
//                        parameters.put("REPORT_DATE", java.sql.Date.valueOf(currentDate)); // Example date
//
//                        // 5. Fill the report with data from the DB
//                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, conn);
//                        System.out.println("Report filled with data.");
//                        // 6. Show the report in viewer (GUI)
//                        JasperViewer.viewReport(jasperPrint, false);
//                        System.out.println("Report displayed successfully.");
//                        doClose(returnStatus);
                    }
                    case 1 -> {
                        // 2. Load JRXML report file from classpath
                        InputStream jrxmlStream = Invoices_list.class.getClassLoader().getResourceAsStream("Reports/MonthlyExspensesReport.jrxml");

                        if (jrxmlStream == null) {
                            throw new JRException("newDaily.jrxml not found. Ensure it's in src/Reports and properly added to the classpath.");
                        }
                        // 3. Compile the JRXML to JasperReport
                        JasperReport jasperReport = JasperCompileManager.compileReport(jrxmlStream);
                        System.out.println("JRXML compiled successfully.");
                        // 4. Set report parameters
                        Map<String, Object> parameters = new HashMap<>();
                        parameters.put("REPORT_TITLE", "Monthly Invoice Report");
                        LocalDate today = LocalDate.now();
                        LocalDate startOfMonth = today.with(TemporalAdjusters.firstDayOfMonth());
                        LocalDate endOfMonth = today.with(TemporalAdjusters.lastDayOfMonth());
//                    LocalDate startOfMonth = LocalDate.of(2025, 7, 1);
//                    LocalDate endOfMonth = LocalDate.of(2025, 7, 31);

                        parameters.put("REPORT_START_DATE", java.sql.Date.valueOf(startOfMonth));
                        parameters.put("REPORT_END_DATE", java.sql.Date.valueOf(endOfMonth));
//                        double monthlyTotal = calculateMonthlyTotal(conn, startOfMonth, endOfMonth);
//                        parameters.put("REPORT_MONTHLY_TOTAL", monthlyTotal);

                        // 5. Fill the report with data from the DB
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, conn);
                        System.out.println("Report filled with data.");
                        // 6. Show the report in viewer (GUI)
                        JasperViewer.viewReport(jasperPrint, false);
                        System.out.println("Report displayed successfully.");
                        doClose(returnStatus);
                    }
                    case 2 -> {
                        // 2. Load JRXML report file from classpath
                        InputStream jrxmlStream = Invoices_list.class.getClassLoader().getResourceAsStream("Reports/ALLExspensesReport.jrxml");

                        if (jrxmlStream == null) {
                            throw new JRException("newDaily.jrxml not found. Ensure it's in src/Reports and properly added to the classpath.");
                        }
                        // 3. Compile the JRXML to JasperReport
                        JasperReport jasperReport = JasperCompileManager.compileReport(jrxmlStream);
                        System.out.println("JRXML compiled successfully.");
                        // 4. Set report parameters
                        Map<String, Object> parameters = new HashMap<>();
                        parameters.put("REPORT_TITLE", "All Invoice Report");
//                    LocalDate today = LocalDate.now();
//                    LocalDate startOfMonth = today.with(TemporalAdjusters.firstDayOfMonth());
//                    LocalDate endOfMonth = today.with(TemporalAdjusters.lastDayOfMonth());
//                    LocalDate startOfMonth = LocalDate.of(2025, 7, 1);
//                    LocalDate endOfMonth = LocalDate.of(2025, 7, 31);

//                    parameters.put("REPORT_START_DATE", java.sql.Date.valueOf(startOfMonth));
//                    parameters.put("REPORT_END_DATE", java.sql.Date.valueOf(endOfMonth));
//                    double monthlyTotal = calculateMonthlyTotal(conn, startOfMonth, endOfMonth);
//                    parameters.put("REPORT_MONTHLY_TOTAL", monthlyTotal);
                        // 5. Fill the report with data from the DB
                        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, conn);
                        System.out.println("Report filled with data.");
                        // 6. Show the report in viewer (GUI)
                        JasperViewer.viewReport(jasperPrint, false);
                        System.out.println("Report displayed successfully.");
                        doClose(returnStatus);
                    }
                    default ->
                        throw new AssertionError();
                }
            } catch (JRException e) {
                System.err.println("JasperReport Error: " + e.getMessage());
            } catch (SQLException e) {
                System.err.println("Database Error: " + e.getMessage());
            } finally {
                // 7. Always close DB connection
                if (conn != null) {
                    try {
                        conn.close();
                        System.out.println("🔒 Database connection closed.");
                    } catch (SQLException e) {
                        System.err.println("⚠️ Failed to close DB connection: " + e.getMessage());
                    }
                }
            }
        }


    }//GEN-LAST:event_btnperviewActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void cboReportFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboReportFormatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboReportFormatActionPerformed

    private void CheckBox_DTDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_DTDActionPerformed
        if (this.CheckBox_DTD.getModel().isSelected()) {
            this.cboReportFormat.setEnabled(false);
            this.CheckBox_GR.setEnabled(false);
        } else {
            this.cboReportFormat.setEnabled(true);
            this.CheckBox_GR.setEnabled(true);
        }

    }//GEN-LAST:event_CheckBox_DTDActionPerformed

    private void CheckBox_GRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_GRActionPerformed
        if (this.CheckBox_GR.getModel().isSelected()) {
            this.spinnerStartDate.setEnabled(false);
            this.spinnerEndDate.setEnabled(false);
            this.CheckBox_DTD.setEnabled(false);
        } else {
            this.spinnerStartDate.setEnabled(true);
            this.spinnerEndDate.setEnabled(true);
            this.CheckBox_DTD.setEnabled(true);
        }
    }//GEN-LAST:event_CheckBox_GRActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(exspenseReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(exspenseReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(exspenseReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(exspenseReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                exspenseReport dialog = new exspenseReport(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private static double calculateMonthlyTotal(Connection conn, LocalDate startDate, LocalDate endDate) throws SQLException {
        double total = 0.0;
        String sql = "SELECT SUM(total_amount) FROM public.invoices WHERE invoice_date BETWEEN '" + startDate + "' AND '" + endDate + "'";
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            if (rs.next()) {
                total = rs.getDouble(1);
            }
        }
        return total;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckBox_DTD;
    private javax.swing.JCheckBox CheckBox_GR;
    private javax.swing.JButton btnperview;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> cboReportFormat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSpinner spinnerEndDate;
    private javax.swing.JSpinner spinnerStartDate;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
}
